{\rtf1\ansi\ansicpg936\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity ^0.5.16;\
\
/**\
 \{\
    arbi4 0x6eC26E98A1D4695F12EB8F06b67E007aA7982426 owner ac1: 0x379F025b37E04d9d5ec4e3198b36717FA54C513c\
    arbi4 0x3996A4674D864d0f6688720ACeF930755F603637 owner ac1: 0x379F025b37E04d9d5ec4e3198b36717FA54C513c\
    \
 \}\
*/\
\
import "./libraries/SafeMath.sol";\
\
contract loanETH \{\
    string public name     = "ETH";\
    \
    event  Approval(address indexed src, address indexed guy, uint wad);\
    event  Transfer(address indexed src, address indexed dst, uint wad);\
    event  Deposit(address indexed dst, uint wad);\
    event  Withdrawal(address indexed src, uint wad);\
\
    mapping (address => uint) public  balanceOf; // 
\f1 \'d3\'c3\'bb\'a7\'b4\'e6\'bf\'ee\'d3\'e0\'b6\'ee
\f0  
\f1 \'b2\'bb\'ba\'ac\'c0\'fb\'cf\'a2
\f0 \
  \
    uint public decimals = 18;\
    uint public taxRate = 100000; // 
\f1 \'cb\'b0\'ca\'d5\'c0\'fb\'c2\'ca\'ce\'aa\'bd\'e8\'bf\'ee\'c0\'fb\'cf\'a2
\f0 10% (
\f1 \'c4\'ac\'c8\'cf
\f0 ) 100000 / 1000000\
    uint public borrowDailyRate = 270; // 0.00027% 
\f1 \'bd\'e8\'bf\'ee\'c0\'fb\'c2\'ca\'c4\'ea\'cf\'a2
\f0 10% (
\f1 \'c4\'ac\'c8\'cf
\f0 )\
    uint public rateDenominator = 1000000; // 
\f1 \'cd\'b3\'d2\'bb\'b1\'c8\'c0\'fd\'b5\'c4\'b7\'d6\'c4\'b8\'b7\'d6\'b0\'d9\'cd\'f2
\f0 (0.00027 = 270 / 1000000)\
    \
    uint public taxTotal = 0;\
     //
\f1 \'b4\'e6\'bf\'ee\'d7\'dc\'b6\'ee\'d3\'c3\'d3\'da\'bc\'c6\'cb\'e3\'bd\'f6\'d3\'c3\'bb\'a7\'b4\'e6\'bf\'ee\'cb\'f9\'d5\'bc\'b1\'c8\'c0\'fd
\f0 \
     //
\f1 \'b0\'fc\'ba\'ac\'d2\'d1\'bd\'e8\'b3\'f6\'b5\'c4\'b4\'fa\'b1\'d2
\f0 \
     //
\f1 \'b2\'bb\'b5\'c8\'cd\'ac\'d3\'da\'ba\'cf\'d4\'bc\'b4\'fa\'b1\'d2\'d3\'e0\'b6\'ee
\f0 \
    uint public depositTotal = 0;\
    address payable admin = 0x2d6283FF3777Ae609B01b4BB9dA1e95088204400;\
    // 
\f1 \'b4\'e6\'bf\'ee\'bc\'c7\'c2\'bc
\f0 \
    // update 
\f1 \'ce\'aa\'d7\'ee\'ba\'f3\'b8\'fc\'d0\'c2\'c8\'d5\'c6\'da
\f0 (
\f1 \'c8\'a1\'bf\'ee\'c8\'d5\'c6\'da
\f0 )\
    struct deposit\{\
        uint date;\
        uint wad;\
        uint interest; // 
\f1 \'b4\'e6\'bf\'ee\'bd\'e1\'cf\'a2
\f0 \
        uint update; // 
\f1 \'ce\'aa\'d7\'ee\'ba\'f3\'b8\'fc\'d0\'c2\'c8\'d5\'c6\'da
\f0 (
\f1 \'c8\'a1\'bf\'ee\'c8\'d5\'c6\'da
\f0 )\
    \}\
    mapping (address => deposit) public deposits;\
    address[] public depositsArray;\
    \
    // 
\f1 \'b8\'dc\'b8\'cb\'bd\'e8\'bf\'ee\'bc\'c7\'c2\'bc
\f0 \
    // update 
\f1 \'ce\'aa\'d7\'ee\'ba\'f3\'b8\'fc\'d0\'c2\'c8\'d5\'c6\'da
\f0 (
\f1 \'bb\'b9\'bf\'ee\'c8\'d5\'c6\'da
\f0 )\
    // container
\f1 \'ce\'aa\'b0\'fc\'c0\'a8\'b6\'e0\'b8\'f6\'b6\'cc\'d7\'d6\'b6\'ce\'b5\'c4\'c8\'dd\'c6\'f7\'d7\'d6\'b6\'ce
\f0  
\f1 \'d4\'da\'c7\'b0\'b6\'cb\'b4\'f2\'b0\'fc\'ba\'cd\'bb\'b9\'d4\'ad
\f0 (
\f1 \'ba\'f3\'c6\'da\'bf\'c9\'b5\'fe\'bc\'d3\'c4\'da\'c8\'dd
\f0 )\
    // 
\f1 \'d2\'d4
\f0 1
\f1 \'bf\'aa\'cd\'b7
\f0 3
\f1 \'ce\'bb\'b1\'ed\'ca\'be\'b8\'dc\'b8\'cb\'b1\'b6\'ca\'fd
\f0 (001)1
\f1 \'ce\'bb\'ce\'aa\'bd\'bb\'d2\'d7\'c0\'e0\'d0\'cd
\f0 1
\f1 \'b6\'e0
\f0  2
\f1 \'bf\'d5
\f0 \
    struct borrower\{\
        uint date;\
        address owner; // 
\f1 \'bd\'e8\'bf\'ee\'b5\'d8\'d6\'b7\'b5\'c4
\f0 owner(
\f1 \'d3\'c3\'d3\'da\'bc\'c7\'c2\'bc\'c6\'bd\'cc\'a8\'d5\'ca\'ba\'c5\'b5\'c4\'d3\'b5\'d3\'d0\'d5\'df
\f0 )\
        uint price; // 
\f1 \'bd\'e8\'bf\'ee\'ca\'b1\'cf\'e0\'b6\'d4\'bd\'bb\'d2\'d7\'b1\'d2\'b5\'c4\'bc\'db\'b8\'f1
\f0 \
        uint wad; // 
\f1 \'bd\'e8\'bf\'ee\'ca\'fd\'c1\'bf
\f0 \
        uint repay; // 
\f1 \'bb\'b9\'bf\'ee\'ca\'fd\'c1\'bf
\f0 \
        uint container; // 
\f1 \'c8\'dd\'c6\'f7\'d7\'d6\'b6\'ce
\f0  110202 
\f1 \'b1\'b6\'b8\'dc\'b8\'cb\'c2\'f4\'bf\'d5
\f0 \
        uint update; // 
\f1 \'d7\'ee\'ba\'f3\'b8\'fc\'d0\'c2\'c8\'d5\'c6\'da
\f0 (
\f1 \'bb\'b9\'bf\'ee\'c8\'d5\'c6\'da
\f0 )\
    \}\
    mapping (address => borrower) public borrowers;\
    \
    // 
\f1 \'b4\'e6\'bf\'ee
\f0 (
\f1 \'cc\'ed\'bc\'d3\'c1\'f7\'b6\'af\'d0\'d4
\f0 )\
    function addDeposit() external payable \{\
        \
        balanceOf[msg.sender] += msg.value;\
        uint countWad = deposits[msg.sender].wad + msg.value;\
        uint countInterest = deposits[msg.sender].interest;\
\
        deposits[msg.sender] = deposit(block.timestamp, countWad, countInterest, deposits[msg.sender].update);\
        depositsArray.push(msg.sender);\
        depositTotal += msg.value;\
    \}\
    \
    // 
\f1 \'c1\'f7\'b6\'af\'d0\'d4\'c8\'a1\'bf\'ee
\f0 \
    function withdraw(uint wad) external \{\
        require(balanceOf[msg.sender] >= wad);\
        msg.sender.transfer(wad);\
        balanceOf[msg.sender] -= wad;\
        deposits[msg.sender].wad -= wad;\
        deposits[msg.sender].update = block.timestamp;\
        depositTotal -= wad;\
        emit Withdrawal(msg.sender, wad);\
    \}\
    \
    // 
\f1 \'c8\'a1\'c0\'fb\'cf\'a2
\f0 \
    function withdrawInterest(uint withoutWad) external \{\
        require(deposits[msg.sender].interest >= withoutWad);\
        msg.sender.transfer(withoutWad);\
        deposits[msg.sender].interest -= withoutWad;\
        deposits[msg.sender].update = block.timestamp;\
    \}\
    \
    // 
\f1 \'b9\'dc\'c0\'ed\'d4\'b1\'cc\'e1\'c8\'a1\'cb\'b0\'ca\'d5
\f0 \
    function withdrawTax(uint wad) external \{\
        require(msg.sender == admin);\
        require(taxTotal >= wad);\
\
        msg.sender.transfer(wad);\
        taxTotal -= wad;\
    \}\
    \
    // 
\f1 \'bd\'e8\'bf\'ee
\f0 \
    // 
\f1 \'d0\'e8\'d2\'aa\'c3\'f7\'c8\'b7\'b8\'f8\'b3\'f6\'bd\'e8\'bf\'ee\'b5\'d8\'d6\'b7\'ba\'cd\'b2\'d9\'d7\'f7\'d5\'df\'b5\'d8\'d6\'b7
\f0 (owner)\
    // 
\f1 \'bd\'e8\'bf\'ee\'b5\'d8\'d6\'b7\'bf\'c9\'c4\'dc\'ce\'aa\'b2\'d9\'d7\'f7\'d5\'df\'b5\'c4\'c6\'bd\'cc\'a8\'d5\'cb\'ba\'c5
\f0 \
    function borrow(uint borrowWad, address payable to, uint price, uint container) public \{\
        require(address(this).balance > borrowWad);\
        to.transfer(borrowWad);\
        uint countWad = borrowers[to].wad + borrowWad;\
\
        uint countRepay = borrowers[to].repay + 0;\
        borrowers[to] = borrower(block.timestamp, msg.sender, price, countWad, countRepay, container, borrowers[to].update);\
    \
    \}\
    \
    // 
\f1 \'c6\'bd\'b2\'d6\'bb\'b9\'bf\'ee
\f0 \
    // 
\f1 \'bb\'b9\'bf\'ee\'d0\'e8\'b0\'fc\'c0\'a8\'bd\'e8\'bf\'ee\'c0\'fb\'cf\'a2
\f0 \
    // 
\f1 \'c7\'b0\'b6\'cb\'cb\'e3\'ba\'c3\'b1\'be\'b4\'ce\'bb\'b9\'bf\'ee\'b5\'c4\'ca\'fd\'c1\'bf\'bc\'b0\'c0\'fb\'cf\'a2
\f0 \
    function repay(uint repayValue, uint price) external payable\{\
        \
        uint rate = MyBorrowerRateCount(msg.sender, repayValue);\
        \
        require(rate>0);\
        \
        uint tax = rate - (rate * taxRate / rateDenominator);\
        uint netRate = rate - tax;\
        taxTotal += tax;\
    \
        // 
\f1 \'bc\'c6\'cb\'e3\'c3\'bf\'b4\'e6\'bf\'ee\'bb\'a7\'b1\'be\'b4\'ce\'b7\'d6\'b5\'c3\'c0\'fb\'cf\'a2
\f0 \
        for (uint i=0; i<depositsArray.length; i++) \{\
            // 
\f1 \'bc\'c6\'cf\'a2\'d0\'e8\'b4\'e6\'bf\'ee\'d3\'e0\'b6\'ee\'b4\'f3\'d3\'da
\f0 1
\f1 \'b8\'f6\'b5\'a5\'ce\'bb\'b4\'fa\'b1\'d2
\f0 \
            if (deposits[depositsArray[i]].wad > 1*(10**decimals)) \{\
                deposits[depositsArray[i]].interest += (deposits[depositsArray[i]].wad * netRate) / depositTotal; \
            \}\
        \}\
        \
        borrowers[msg.sender].update = block.timestamp;\
        borrowers[msg.sender].price = price;\
        borrowers[msg.sender].repay += repayValue;\
        \
    \}\
\
    function setBorrowRate(uint newRate) external returns(uint) \{\
        require(msg.sender == admin);\
        borrowDailyRate = newRate;\
\
        return (borrowDailyRate);\
    \}\
    \
    function getAdmin() public view returns (address) \{\
        return admin;\
    \}\
    \
    function setAdmin(address newAdmin) external returns(address) \{\
        require(msg.sender == admin);\
        admin = address(uint160(newAdmin));\
        return admin;\
    \}\
    \
    // 
\f1 \'b2\'e9\'d1\'af\'b4\'e6\'bf\'ee\'c8\'cb\'ca\'fd
\f0 \
    function getDepositsLength() public view returns (uint) \{\
        return depositsArray.length;\
    \}\
\
    // 
\f1 \'b2\'e9\'d1\'af\'ba\'cf\'d4\'bc\'d3\'e0\'b6\'ee
\f0 \
    function getBalance() public view returns (uint) \{\
        return address(this).balance;\
    \}\
    \
    // @borrowerQty 
\f1 \'bd\'e8\'bf\'ee\'ca\'fd\'c1\'bf
\f0 \
    // 
\f1 \'b0\'b4\'d3\'c3\'bb\'a7\'bd\'e8\'bf\'ee\'ca\'fd\'c1\'bf\'bc\'c6\'cb\'e3\'bd\'e8\'bf\'ee\'c0\'fb\'cf\'a2
\f0 \
    // 
\f1 \'b0\'b4\'c4\'ea\'cf\'a2
\f0 10% 1
\f1 \'c4\'ea
\f0 =31104000
\f1 \'c3\'eb
\f0 =360
\f1 \'cc\'ec
\f0 =12
\f1 \'d4\'c2
\f0 =30
\f1 \'cc\'ec\'bd\'e8\'bf\'ee
\f0 \
    // 
\f1 \'b2\'bb\'d7\'e3\'d2\'bb\'cc\'ec\'b0\'b4\'d2\'bb\'cc\'ec\'cb\'e3
\f0 \
    function MyBorrowerRateCount(address user, uint borrowerQty) public view returns(uint myRate) \{\
\
            // 
\f1 \'d2\'d4\'c3\'eb\'bc\'c6\'cb\'e3\'bd\'e8\'bf\'ee\'cc\'ec\'ca\'fd
\f0 \
            uint diffTime = SafeMath.div((block.timestamp - borrowers[user].date), 86400);\
        \
            // 
\f1 \'c8\'e7\'b9\'fb\'bd\'e8\'bf\'ee\'b2\'ce\'ca\'fd\'ce\'aa
\f0 0
\f1 \'d4\'f2\'b0\'b4\'c8\'ab\'b2\'bf\'ca\'a3\'d3\'e0\'ca\'fd\'c1\'bf\'bc\'c6\'cb\'e3
\f0 \
            // 
\f1 \'c8\'e7\'b9\'fb\'bd\'e8\'bf\'ee\'b2\'ce\'ca\'fd\'ce\'aa\'b2\'bb\'ce\'aa
\f0 0 
\f1 \'d4\'f2\'b0\'b4\'b2\'ce\'ca\'fd\'ca\'fd\'c1\'bf\'bc\'c6\'cb\'e3
\f0  
\f1 \'d3\'c3\'d3\'da\'b7\'d6\'c5\'fa\'bb\'b9\'bf\'ee
\f0 \
            if (borrowerQty==0) \{\
                uint myBorrower = borrowers[user].wad - borrowers[user].repay;\
                myRate = (borrowDailyRate * myBorrower / rateDenominator) * (diffTime + 1);\
\
            \} else \{\
                myRate = (borrowDailyRate * borrowerQty / rateDenominator) * (diffTime + 1);\
            \}\
        \
    \}\
    \
\}\
}